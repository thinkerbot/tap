#!/usr/bin/env ruby
# usage: rap taskname {options} [args]

$:.unshift "#{File.dirname(__FILE__)}/../lib"
require 'rap/declarations'

# setup the environment
begin
  
  # handle super options
  $DEBUG = true if ARGV.delete('-d-')
  env = Tap::Exe.instantiate
  env.unshift(Rap::Declarations.env)

  Dir.glob('[TtRr]apfile{,.rb}').each do |task_file|
    task_file  = File.expand_path(task_file)
    next unless File.file?(task_file)
    
    env.loads.unshift(task_file)
  end
  
rescue(Tap::Env::ConfigError)
  # catch errors and exit gracefully
  # (errors usu from gem loading errors)
  puts $!.message
  exit(1)
end

#
# setup after script
#

at_exit do
  begin
    eval(env.after) if env.after != nil
  rescue(Exception)
    puts "Error in after script."
    env.handle_error($!)
    exit(1)
  end
end

#
# run before script
#

begin
  eval(env.before) if env.before != nil
rescue(Exception)
  puts "Error in before script."
  env.handle_error($!)
  exit(1)
end 

#
# run rap
#

module Rap
  autoload(:Rake, 'rap/rake')
end

begin
  env.activate
  
  case ARGV[0]
  when '--help', nil, '-T'
    rap_template = %Q{<% if count > 1 && !entries.empty? %>
<%= env_name %>:
<% end %>
<% entries.each do |name, const| %>
<%   desc = if const.require_path == nil # should be a declaration %>
<%     manifest = const.constantize.manifest %>
<%     next if manifest == nil || manifest.empty? %>
<%     manifest %>
<%   else %>
<%     const.document[const.name]['manifest'] %>
<%   end %>
  <%= name.ljust(width) %><%= desc.empty? ? '' : '  # ' %><%= desc %>
<% end %>}

    puts Lazydoc.usage(__FILE__)
    puts
    puts "===  tap tasks ==="
    puts env.summarize(:tasks, rap_template)
    puts
    puts "=== rake tasks ==="
    Rap::Rake.new.enq('-T')
    Tap::App.instance.run
    
    # this is not currently reached as rake exits on -T
    puts
    puts "version #{Tap::VERSION} -- #{Tap::WEBSITE}"
    exit
  else
    queues = env.build(ARGV) do |args|
      warn "warning: implict rake for [#{args.join(' ')}]"
      Rap::Rake
    end
    ARGV.clear

    if queues.empty?
      puts "no task specified"
      exit
    end
  
    env.set_signals
    env.run(queues)
  end
  
rescue
  env.handle_error($!)
end

exit(0)