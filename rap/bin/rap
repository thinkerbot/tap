#!/usr/bin/env ruby
# usage: rap taskname {options} [args] [-d-]

$:.unshift "#{File.dirname(__FILE__)}/../lib"
require 'rap'

# setup the environment
begin
  
  env = Tap::Exe.setup
  env.unshift(Rap::Declarations.env)
  
rescue(Tap::Env::ConfigError)
  # catch errors and exit gracefully
  # (errors usu from gem loading errors)
  puts $!.message
  exit(1)
end

#
# run rap
#

module Rap
  autoload(:Rake, 'rap/rake')
end

Dir.glob('[TtRr]apfile{,.rb}').each do |rapfile|
  next unless File.file?(rapfile)
  load rapfile
end

case ARGV[0]
when '--help', nil, '-T'
  
  # same as normal summarize, but pass over tasks that have no comment
  summary_template = %Q{<% entries.delete_if {|key, const| const.comment.kind_of?(Rap::Description) && const.comment.resolve.desc == nil } %>
<% if !entries.empty? && count > 1 %>
<%= env_key %>:
<% end %>
<% entries.each do |key, const| %>
  <%= key.ljust(width) %> # <%= const.comment %>
<% end %>
}
  
  puts Lazydoc.usage(__FILE__)
  puts
  puts "===  tap tasks ==="
  puts env.tasks.summarize(summary_template)
  
  if Rap::Rake.has_rakefile?
    puts
    puts "=== rake tasks ==="
    Rap::Rake.new.execute('-T')
  end
  
  puts
  puts "version #{Tap::VERSION} -- #{Tap::WEBSITE}"
else
  app = Tap::App.instance
  schema = Tap::Schema.parse(ARGV)
  begin
    queues = env.build(schema, app) do |type, key, metadata|
      if type == :task && Rap::Rake.has_rakefile?
        metadata.unshift(key)
        warn "warning: implict rake for '#{metadata.join(' ')}'"
        Rap::Rake
      else
        nil
      end
    end
    
    queues.each do |queue|
      app.queue.concat(queue)
    end
  rescue
    raise if $DEBUG
    puts $!.message
    exit(1)
  end

  if app.queue.empty?
    puts "no task specified"
    exit
  end

  env.set_signals(app)
  app.run
end

exit(0)