#!/usr/bin/env ruby
# usage: rap taskname {options} [args] [-d-]

$:.unshift "#{File.dirname(__FILE__)}/../lib"
require 'rap'
require 'tap/parser'

#
# setup the application
#

begin
  app = Tap::App.setup
  env = app.env
  unless env.any? {|e| e.root.root == Rap::RAP_HOME }
    env.deactivate
    env.push Tap::Env.new(Rap::RAP_HOME, env.context)
    env.activate
  end
  
rescue(Tap::Env::ConfigError)
  # catch errors and exit gracefully
  # (errors usu from gem loading errors)
  puts $!.message
  exit(1)
end

#
# run rap
#

env.root.glob(:root, '[TtRr]apfile{,.rb}').each do |rapfile|
  env.scan(:root, File.basename(rapfile))
  load rapfile
end

case ARGV[0]
when '--help', nil, '-T'
  constants = app.env.constants
  tasks = constants.summarize do |constant|
    constant.types['task'] or begin
      const = constant.constantize(false)
      const && const.ancestors.include?(Rap::Task) && const.desc ? const.desc.desc : nil
    end
  end

  puts Lazydoc.usage(__FILE__)
  puts
  puts "===  tap tasks ==="
  puts tasks
  if Rap::Rake.has_rakefile?
    puts
    puts "=== rake tasks ==="
    Rap::Rake.new.execute('-T')
  end

  puts
  puts "version #{Rap::VERSION} -- #{Rap::WEBSITE}"
  
else
  begin
    app.call('sig' => 'parse', 'args' => ARGV) do |spec|
      type, obj, sig, var, klass = spec

      if type == :node
        if env.constants.seek(klass).nil? && Rap::Rake.has_rakefile?
          warn "warning: implict rake for #{spec.inspect}"
          spec.insert(4, 'rap:rake')
        end
      end

      true
    end
    
    app.run
  rescue
    puts $!.message
    exit(1)
  end
end

exit(0)