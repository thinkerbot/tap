= Syntax Reference

== Task Declarations

A task declaration:

  task(<name>, <arg_names...>, {<configs>}) do |task, args|
    # arguments are available through args:
    args.arg_name
    
    # configurations are available through task
    task.key
  end

A task declaration with dependencies:

  task({<name> => [<dependencies...>]}, <arg_names...>, {<configs>}) { task ... }

A namespace declaration:

  namespace(<name>) { task ... }
 
Simple documentation:
 
  desc "description"
  task ...
  
Extended documentation:
  
  # ::desc description
  # Extended documentation may span multiple lines, and 
  # supports
  #
  #   code indentation
  #   like this.
  #
  # Lines are justified and wrapped on the command line.
  task ...

Pains were taken to make task declarations for Rap work the similar to Rake
tasks. For both Rake and Rap (noting that in general task classes are not
limited in these ways):

* tasks are singleton instances that may be extended across multiple
  declarations
* tasks do not pass inputs from one task to the next
* tasks only execute once

A few syntactical differences between Rake and Rap must to be noted, as they
can cause errors during migration.

==== No :needs

Rap does not support :needs as a way to specify dependencies.  For instance,
this will declare a ':needs' configuration with the default value ':another',
not a task which depends on another:

  Rap.task :name, :needs => :another

==== Namespace Lookup

Rap immediately resolves dependencies relative to the top level namespace,
which is very different from Rake. Rake waits to resolve dependencies and will
use a match within a namespace if it becomes available. For these tasks rap
and rake produce different results:

  [Rapfile/Rakfile]
  
  task(:outer) { print 'non-nested' }
  namespace :nest do
    task(:inner1 => :outer) { puts ' was executed' }
    task(:inner2 => 'nest:outer') { puts ' was executed' }
    task(:outer) { print 'nested' }
  end
  
Rap resolves the dependencies literally:

  % rap nest/inner1
  non-nested was executed
  
  % rap nest/inner2
  nested was executed

Rake resolves the dependencies relative to the namespace:
  
  % rake nest:inner1
  nested was executed
  
  % rake nest:inner2
  nested was executed
