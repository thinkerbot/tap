= Quick Start Tutorial

=== Basic Usage

Begin by creating a tap root directory structure:

  % tap generate root root
  % cd root
  
Make a task:

  % tap generate task goodnight

Test the task:
 
  % rake test 
  
Get help for the task:

  % tap run -- goodnight --help
  Goodnight -- <replace with manifest summary>
  --------------------------------------------------------------------------------
    <replace with command line description>
  --------------------------------------------------------------------------------
  usage: tap run -- goodnight NAME

  configurations:
          --message MESSAGE            a sample config

  options:
      -h, --help                       Print this help
          --name NAME                  Specify a name
          --use FILE                   Loads inputs from file

Run the task:

  % tap run -- goodnight moon
    I[23:22:19]          goodnight moon
    
Run the task, setting the 'key' configuration:
  
  % tap run -- goodnight moon --message hello
    I[23:22:46]              hello moon
  
Run multiple tasks, or in this case the same task twice:

  % tap run -- goodnight moon -- goodnight opus
    I[23:23:06]          goodnight moon
    I[23:23:06]          goodnight opus

Same as above, but now dump the results to a file:

  % tap run -- goodnight moon -- goodnight opus --+ dump output.yml
    I[23:23:26]          goodnight moon
    I[23:23:26]          goodnight opus
    I[23:23:26]               dump output.yml

The dump file contents look like this:

  # audit:
  # o-[] "opus"
  # o-[goodnight] "goodnight opus"
  # 
  # o-[] "moon"
  # o-[goodnight] "goodnight moon"
  # 
  # date: 2008-08-05 23:23:26
  --- 
  goodnight (2769410): 
  - goodnight opus
  goodnight (2780180): 
  - goodnight moon

The comments at the beginning are an audit trace of the run.  In this case two separate tasks were run sequentially, hence you can see each task, the task inputs, and the task results as separate units.  A YAML hash follows the audit with the aggregated task results, keyed by the task name and object id.  Since the results are represented as a hash, the order of the tasks sometimes gets scrambled, as in this case.

=== Task Definition

Navigate to and open the <tt>lib/goodnight.rb</tt> file.  Inside you can see the class definition.  Notice configurations are mapped to methods, and the task documentation is located in the comments.  Let's change it up a bit:

  [lib/goodnight.rb]
  # Goodnight::manifest Your basic goodnight moon task.
  #
  # Prints goodnight to a number of things with a configurable, 
  # reversible message.
  #
  class Goodnight < Tap::Task

    config :message, 'goodnight'           # a goodnight message
    config :reverse, false, &c.flag        # reverses the message

    def process(*names)
      names.collect do |name|
        log(reverse ? message.reverse : message, name)
        "#{message} #{name}"
      end
    end
  end

The new configurations and documentation are immediately available:

  % tap run -- goodnight --help
  Goodnight -- Your basic goodnight moon task.
  --------------------------------------------------------------------------------
    Prints goodnight to a number of things with a configurable, reversible
    message.
  --------------------------------------------------------------------------------
  usage: tap run -- goodnight NAMES...

  configurations:
          --message MESSAGE            a goodnight message
          --reverse                    reverses the message

  options:
      -h, --help                       Print this help
          --name NAME                  Specify a name
          --use FILE                   Loads inputs from file

And the task is ready to go:

  % tap run -- goodnight moon lamp 'little toy boat'
    I[23:29:26]          goodnight moon
    I[23:29:26]          goodnight lamp
    I[23:29:26]          goodnight little toy boat

  % tap run -- goodnight mittens --reverse
    I[23:29:53]          thgindoog mittens
  
Now lets use the previous results; they get loaded and added to the end of the inputs:

  % tap run -- goodnight --use output.yml
    I[23:31:32]          goodnight goodnight opus
    I[23:31:32]          goodnight goodnight moon
  
=== Task Declaration

Sometimes a condensed task declaration is desirable.  Tap provides a declaration
syntax a-la rake, accessible through the Tap module to prevent conflicts with rake.  
Declarations can get put in any <tt>.rb</tt> file under the lib directory, or in 
<tt>tapfile.rb</tt>.

  [tapfile.rb]
  # Hello::manifest Your basic hello world task.
  # Prints the input with a configurable greeting.
  
  Tap.task('hello', :greeting => 'hello') do |task, name|
    task.log task.greeting, name
    "#{task.greeting} #{name}"
  end

The declaration makes a task class based on the name (ie namespaces are naturally
supported by names like <tt>'nested/task'</tt>).  The classes are ready for use in 
scripts:

  require 'tapfile'
  Hello.new.process('world')       # => 'hello world'

And from the command line:

  % tap run -- hello world --greeting bonjour
    I[23:36:47]            bonjour world

  % tap run -T
    root:
      goodnight   # Your basic goodnight moon task.
      hello       # Your basic hello world task.
    tap:
      dump        # the default dump task
      rake        # run rake tasks


If you want to get fancy, you can put declarations in the Tap module and add 
configs as in the full task definition:

  [tapfile.rb]
  # ...
  module Tap

    # Nested::Task::manifest just for illustration
    #
    # Extended documentation...
    #
    task('nested/task', 
      config(:key, 'value'),         # a config
      config(:number, 1, &c.num)     # a config validated as a number
    ) do |task, input|
      # ...
    end
  end
  
  % tap run -- nested/task --help
  Nested::Task -- just for illustration
  --------------------------------------------------------------------------------
    Extended documentation...
  --------------------------------------------------------------------------------
  usage: tap run -- nested/task 

  configurations:
          --key KEY                    a config
          --number NUMBER              a config validated as a number

  options:
      -h, --help                       Print this help
          --name NAME                  Specify a name
          --use FILE                   Loads inputs from file

=== Config Files

So say you wanted static configs for a task.  Make a configuration file:

  % tap generate config goodnight
        
Set the configurations here and they get used by the task:

  [config/goodnight.yml]
  ###############################################################################
  # Goodnight configurations
  ###############################################################################

  message: goodnight

  reverse: true
  
As can be seen here (note reverse was set to true):

  % tap run -- goodnight moon
    I[23:40:39]          thgindoog moon

If you need to run a task with multiple sets of configurations, simply define an 
array of configurations in the config file:
  
  [config/goodnight.yml]
  - message: goodnight
  - message: sleep well
    reverse: true

  % tap run -- goodnight moon
    I[23:42:46]          goodnight moon
    I[23:42:46]         llew peels moon

The --name option sets the config file used:

  % tap run -- goodnight moon --name no_config_file
    I[23:43:20]          goodnight moon

=== Tap Configuration

Tap itself is highly configurable.  Say you think the run syntax is unnecessarily 
verbose; you can make command aliases to shorten it.  Open the <tt>tap.yml</tt> 
file in your root directory and set the following:

  [tap.yml]
  alias:
    --: [run, --]
    -T: [run, -T]

Now:

  % tap -- hello world
    I[23:43:59]              hello world

  % tap -T
  root:
    concat      # concatenates a trailer to the input
    sample      # a sample task with configurations
    task        # just for illustration
  tap:
    dump        # the default dump task
    rake        # run rake tasks

Global configurations can go in the <tt>~/.tap.yml</tt> file.  Using configurations,
you can specify directory aliases, options, gems, and even additional paths to load 
as if they were gems.
