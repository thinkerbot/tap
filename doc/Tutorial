= Quick Start Tutorial

=== Basic Usage

Begin by creating a tap root directory structure:

  % tap generate root sample_root
  % cd sample_root
  
Make a task:

  % tap generate task sample

Test the task using rake:
 
  % rake test 
  
Get help for the task:

  % tap run -- sample --help
  Sample -- <replace with manifest summary>
  --------------------------------------------------------------------------------
    <replace with command line description>
  --------------------------------------------------------------------------------
  usage: tap run -- sample INPUT
  
  configurations:
          --key KEY                    a sample config

  options:
      -h, --help                       Print this help
          --name NAME                  Specify a name
          --use FILE                   Loads inputs from file

Run the task:

  % tap run -- sample one
    I[21:32:28]        sample one was processed with value
    
Run the task, setting the 'key' configuration:
  
  % tap run -- sample --key alt_value
    I[21:32:28]        sample one was processed with alt_value
    
Run multiple tasks, or in this case the same task twice:

  % tap run -- sample one -- sample two
    I[21:50:40]        sample one was processed with value
    I[21:50:40]        sample two was processed with value
    
Same as above, but now dump the results to a file:

  % tap run -- sample one -- sample two --+ dump 'sample_output.yml'
    I[15:55:26]             sample one was processed with value
    I[15:55:26]             sample two was processed with value
    I[15:55:26]               dump data/sample_output.yml

The dump file contents look like this:

  [data/sample_output.yml]
  # audit:
  # o-[] "one"
  # o-[sample] "one was processed with value"
  # 
  # o-[] "two"
  # o-[sample] "two was processed with value"
  # 
  # date: 2008-07-28 15:55:26
  --- 
  sample (23300910): 
  - one was processed with value
  sample (23295820): 
  - two was processed with value

The comments at the beginning are an audit trace of the run.  In this case two separate tasks were run sequentially, hence you can see each task, the task inputs, and the task results separately.  A YAML hash follows the audit and represents the results of each task keyed like 'task_name (object_id)'.  We'll re-use these results in a minute.

=== Task Definition

Navigate to and open the 'lib/sample.rb' file.  Inside you can see the class definition.  Let's change it up a bit:

  [lib/sample/task.rb]
  # ::manifest an echo task with configurations
  #
  # As can be seen here, the documentation for a task is declared
  # in the comments rather than in the code.  As a result, this
  # text can also be seen in the RDoc (if you wish).
  #
  # This refurbished sample task takes multiple inputs and echos
  # them back with a comment.
  #
  class Sample < Tap::Task

    # Extended configuration documentation 
    # can be put here.  It will appear in
    # config files and RDoc (if you wish).
    config :comment, 'received'           # a comment to lead the echo
    
    # A config with a validation block.
    config :reverse, false, &c.flag       # reverses the comment
  
    def process(*inputs)
      # note the configs map to methods
      log self.name, (reverse ? comment.reverse : comment)
      
      inputs.each do |input|
        log '', input
      end
    end
  end 

The new configurations and documentation are immediately available:

  % tap run -- sample --help
  Sample -- an echo task with configurations
  --------------------------------------------------------------------------------
    As can be seen here, the documentation for a task is declared in the comments
    rather than in the code.  As a result, this text can also be seen in the RDoc
    (if you wish).

    This refurbished sample task takes multiple inputs and echos them back with a
    comment.
  --------------------------------------------------------------------------------
  usage: tap run -- sample INPUTS...
  
  configurations:
          --comment COMMENT            a comment to lead the echo
          --reverse                    reverses the comment

  options:
      -h, --help                       Print this help
          --name NAME                  Specify a name
          --use FILE                   Loads inputs from file

And the task is ready to go:

  % tap run -- sample one
    I[16:30:47]             sample received
    I[16:30:47]                    one
    
  % tap run -- sample one two --comment tog --reverse
    I[16:35:20]             sample got
    I[16:35:20]                    one
    I[16:35:20]                    two   
  
Now lets use the previous results; they get loaded and added to the end of the inputs:

  % tap run -- sample --use sample_output.yml
    I[16:40:38]             sample received
    I[16:40:38]                    one was processed with value
    I[16:40:38]                    two was processed with value

=== Config Files

So say you wanted static configs for this task.  Make a configuration file:

  % tap generate config sample
        
You get documentation in the configuration file by default.  Set the configurations here and they get used by the task:

  [config/sample.yml]
  ###############################################################################
  # Sample configurations
  ###############################################################################

  # Extended configuration documentation can be put
  # here.  It will appear in config files and RDoc (if
  # you wish).
  comment: received

  # A config with a validation block.
  reverse: true

As can be seen here (note reverse was set to true):

  % tap run -- sample one
    I[16:30:47]             sample deviecer
    I[16:30:47]                    one

If you need to batch run the same task with the same inputs, but multiple sets of configurations, simply define an array of configurations in the config file:
  
  [config/sample.yml]
  - comment: received
  - comment: tog
    reverse: true

  % tap run -- sample one
    I[16:51:57]             sample received
    I[16:51:57]                    one
    I[16:51:57]           sample_1 got
    I[16:51:57]                    one
