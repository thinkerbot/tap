= Rap (rakish app)

  rakish adj. having a dashing, jaunty, or slightly disreputable quality or appearance

Rap is a rake-like syntax for declaring Tap tasks.  Rap is locally-focused, idiomatic, and the simplest way to bridge the gap between Rake and Tap.

== Description

Tap aims to be scalable, which often means a few extra formalities that are excessive for the simplest, most common tasks.  One of the strengths of Rake is it's ability to succinctly express a simple task and bring it to the command line.  Bridging the gap is rap.

Rap provides a rake-like declaration syntax for tap tasks.  In many cases rake tasks can be copy-pasted and work immediately with the rap syntax, with the following benefits:

* a more standard method to provide arguments and configurations
* more extendable documentation
* imperative workflows

The rap executable can specify workflows like 'tap run', and can call rake tasks that you decide to leave as-is in a Rakefile; if you have a Rakefile somewhere, try using rap instead of rake.

== Declaration Syntax

Rap uses a Tapfile and Tap::Declarations to add the declaration methods to a module.  The declarations themselves are very similar to Rake:

  namespace name do
    desc "summary"
    task name => [dependencies], arg_names..., {configs} do |task, args|
      action
    end
  end

These declarations also behave the same as Rake:
  
  str = ""
  task(:a) { str << 'a' }
  
  namespace :b do
    task(:a) { str << 'b' }
  end
  
  c = task(:c => [:a, 'b:a'])
  task(:c) { str << 'c' }
  task(:c) { str << '!' }
  
  c.execute                      
  str                           # => 'abc!'
  
However some important differences distinguish Rap from Rake.  The main difference is that in rap, task defines a singleton subclass of Tap::Task and returns the instance of the subclass (under rake, task defines an instance of Rake::Task, no subclass is defined).  To continue the example:

  c.class                       # => C
  c == C.instance               # => true
  C.superclass                  # => Tap::Task
  
  A.instance.execute
  B::A.instance.execute
  str                           # => 'abc!ab'
