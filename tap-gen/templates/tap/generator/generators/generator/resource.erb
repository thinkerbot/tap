require 'tap/generator/base'

<% redirect do |target| %># :startdoc::generator <replace with summary>
# <replace with description>

# <%= const.name %> Documentation
class <%= const.name %> < Tap::Generator::Base

  config :key, 'value'           # a sample config
  
  helper do
    # helper methods are available in templates
    def format(value)
      value.upcase
    end
  end
  
  # Manifest (m) records methods to be run by the generator.  The inputs are
  # generator inputs from the command line. Any method on self may be recorded
  # in the manifest.  The most common methods are demonstrated below.
  def manifest(m, *inputs)

    # make a directory
    # m.directory 'dir'

    # make a file
    # m.file 'file.txt' do |file|
    #   file << 'content'
    # end

    # template a file in the templates directory using ERB.
    # The last argument defines a hash of local variables
    # for use in the template (here config is used).
    m.template "<%= const.const_name.underscore %>_file.txt", 'template_file.erb', config.to_hash
    
    # do something only on generate/destroy
    # on(:generate) { `chmod 644 #{path('file.txt')}` }
  end
  
end <% module_nest(const.nesting, '  ') { target } end %>
