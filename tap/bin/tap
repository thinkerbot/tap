#!/usr/bin/env ruby
# usage: tap <command> {options} [args]
#
# Launches a tap command.
#
# examples:
#   tap generate root .                  # generates a root dir
#   tap run taskname --option input      # runs the 'taskname' task
#
# help:
#   tap --help                           # prints this help
#   tap command --help                   # prints help for 'command'
#

require "#{File.dirname(__FILE__)}/../lib/tap.rb"

#
# setup the application
#

begin
  app = Tap::App.setup
rescue(Tap::Env::ConfigError)
  # catch errors and exit gracefully
  # (errors usu from gem loading errors)
  puts $!.message
  exit(1)
end

#
# launch the command
#

env = app.env
env.register(:command) do |env|
  env.root.glob(:cmd, "**/*.rb")
end

env.register(:constant) do |env|
  constants = Hash.new do |hash, const_name|
    hash[const_name] = Tap::Env::Constant.new(const_name)
  end
  
  env.load_paths.each do |load_path|
    next unless File.directory?(load_path)
    
    # note changing dir here makes require paths relative to load_path,
    # hence they can be directly converted into a default_const_name
    # rather than first performing Root.relative_path
    Dir.chdir(load_path) do 
      Dir.glob("**/*.rb").each do |path| 
        default_const_name = path.chomp('.rb').camelize
        
        # scan for constants
        Lazydoc::Document.scan(File.read(path)) do |const_name, type, summary|
          const_name = default_const_name if const_name.empty?
          
          constant = constants[const_name]
          constant.register_as(type, summary)
          constant.require_paths << path
        end
      end
    end
  end
  
  constants.keys.sort!.collect! do |key| 
    constants[key]
  end
end

case command = ARGV.shift.to_s  
when '', '--help'
  template = %Q{<% unless entries.empty? || count <= 1 %>
<%= env_key %>:
<% end %>
<% entries.each do |key, path| %>
  <%= key.ljust(width) %>
<% end %>}

  puts Lazydoc.usage(__FILE__)
  puts
  puts "available commands:"
  puts env.summarize(:command, template)
  puts
  puts "version #{Tap::VERSION} -- #{Tap::WEBSITE}"
else
  if path = env.seek(:command, command)
    load path
  else
    puts "Unknown command: '#{command}'"
    puts "Type 'tap --help' for usage information."
  end
end

exit(0)