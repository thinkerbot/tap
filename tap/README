= {Tap (Task Application)}[http://tap.rubyforge.org]

  tap n. to draw a supply from a resource

A configurable, distributable workflow framework.

== Description

Tap allows the construction of workflows that may be defined, configured, and
run from the command line. The tasks and joins composing a workflow are easy
to test, subclass, and distribute as gems.

Tap is the core of the
{Tap-Suite}[http://tap.rubyforge.org/tap-suite/index.html] 
which provides a standard library of 
{tasks}[http://tap.rubyforge.org/tap-tasks/index.html],
{generators}[http://tap.rubyforge.org/tap-gen/index.html], and 
{test utilities}[http://tap.rubyforge.org/tap-test/index.html].

* Website[http://tap.rubyforge.org]
* Github[http://github.com/bahuvrihi/tap/tree/master]
* {Google Group}[http://groups.google.com/group/ruby-on-tap]

== Usage

Tasks are defined as subclasses of Tap::Task.

  [lib/goodnight.rb]
  require 'tap/task'
  
  # Goodnight::task your basic goodnight moon task
  # Says goodnight with a configurable message.
  class Goodnight < Tap::Task
    config :message, 'goodnight'           # a goodnight message
    
    def process(name)
      "#{message} #{name}"
    end
  end

Tap automatically discovers tasks.

  % tap manifest
  task:
    dump                 # the default dump task
    goodnight            # your basic goodnight moon task
    load                 # the default load task
    manifest             # lists resources
    prompt               # an input prompt
  join:
    gate                 # collects results before the join
    join                 # an unsyncrhonized, multi-way join
    sync                 # a synchronized multi-way join

And generates command line documentation.

  % tap goodnight --help
  Goodnight -- your basic goodnight moon task
  --------------------------------------------------------------------------------
    Says goodnight with a configurable message.
  --------------------------------------------------------------------------------
  usage: tap goodnight NAME

  configurations:
          --message MESSAGE            a goodnight message

  options:
          --help                       Print this help
          --config FILE                Specifies a config file

Tasks are immediately available for use in workflows, and may be configured as
if they were individual executables. This workflow joins the goodnight task to
a dump task, which prints the message to stdout.

  % tap goodnight moon -: dump
  goodnight moon

  % tap goodnight world --message hello -: dump
  hello world

Written as classes, tasks can be packaged into gems as normal. Tap will find
tasks in gems with a tap.yml file (see more in the documentation), such that
distribution is normal and unobtrusive.

For local tasks that don't need to be distributed, Tap provides declarations
a-la Rake.  By default any tasks in a tapfile are also available for use.

  [tapfile]
  require 'tap/declarations'
  include Tap::Declarations
  
  desc "concat file contents"
  task :cat do |config, *files|
    files.collect {|file| File.read(file) }.join
  end
  
  desc "grep lines"
  task :grep, :e => '.' do |config, str|
    str.split("\n").grep(/#{config.e}/)
  end
  
  % tap cat tapfile -:a grep -e task -:i dump
  task :cat do |config, *files|
  task :grep, :e => '.' do |config, str|

=== Workflow Syntax

Workflows are specified on the command line using argument vectors separated
by various breaks (ex '-', '--', '-:'). The argument vectors define tasks,
joins, and other resources, while the breaks signify what to do with the
resources.

A simple sequence, indicated by '-:'.

  % tap load 'goodnight moon' -: dump
  goodnight moon

A more formal way of specifying a sequence where '-' separates each resource.

  % tap load 'goodnight moon' - dump - join 0 1
  goodnight moon

A fork.

  % tap load 'goodnight moon' - dump - dump - join 0 1,2
  goodnight moon
  goodnight moon

A merge, using '--' to enque a second load task.

  % tap load goodnight -- load moon - dump - join 0,1 2
  goodnight
  moon

A synchronized merge.

  % tap load goodnight -- load moon - dump - sync 0,1 2
  goodnightmoon

The simple merge passes outputs immediately whereas the sync collects outputs
into an array first; the printout is <tt>['goodnight', 'moon'].to_s</tt>.
Joins can be configured to iterate an array of outputs:

A synchronized merge, iterated.

  % tap load goodnight -- load moon - dump - sync 0,1 2 --iterate
  goodnight
  moon

As a useful analogy, think of tap as a shell where tasks are executables,
objects are stdin/stdout, and joins are many variations of pipe.

== Installation

Tap is available as a gem on Gemcutter[http://gemcutter.org/gems/tap].

  % gem install tap

== Info 

Developer:: {Simon Chiang}[http://bahuvrihi.wordpress.com]
License:: {MIT-Style}[link:files/MIT-LICENSE.html]
