= Setup

By default the tap executable that runs through RubyGems is setup for
convenience, not speed. To make all installed tasks available, tap activates
the most recent version of every gem with a tap.yml file. Under development,
this is definitely the most useful setup but it is 'loading the world' and visibly slows launch time (there is no effect on execution).

Much better performance can be achieved by circumventing RubyGems. Tap can be
installed as a single file that you put along your PATH. Run in this way, the
executable will not load RubyGems, activate installed gems, or do anything you
don't specifically configure it to do (see the ENV section below).

== Installation

To install tap along your path:


== ENV

Configuring the tap is a matter of setting ENV variables that tell the
executable what to make available in workflows. Each of the ENV variables can
be treated like PATH, where multiple paths are joined by ':'. The ENV files
are handled in order as listed, before the command line workflow is parsed.
The defaults apply only to the executable running via RubyGems.

Note that tap can be configured with the ENV variables even when run through
RubyGems -- it just won't launch as fast as possible. The biggest drag is
loading RubyGems itself, although activating gems does play a part.

=== TAPFILE (default 'tapfile')

Specifies ruby files that will be loaded after the default app and env are
initialized. Tapfiles can be used to declare tasks, typically using the
Tap::Declarations module, or to manually setup workflows.

  [tapfile]
  require 'tap/declarations'
  Tap.task :goodnight do |task, args|
    "Goodnight #{args}!"
  end
  
  % tap goodnight Moon -: dump
  Goodnight Moon!

=== TAP_GEMS (default '.')

Specifies a glob of gems to automatically load into the environment. All
current versions of installed gems will be available for selection. Use an
empty string to specify no gems.

  % gem install tap-tasks
  % TAP_GEMS=. tap inspect a b c
  ["a", "b", "c"]
  % TAP_GEMS=tap-ta* tap inspect a b c
  ["a", "b", "c"]
  % TAP_GEMS=nomatch tap inspect a b c
  unresolvable constant: "inspect" (RuntimeError)
  % TAP_GEMS= tap inspect a b c
  unresolvable constant: "inspect" (RuntimeError)

=== TAP_PATH (default '.')

Specifies directories to be scanned for constants and registered with the tap
env. All files matching $TAP_PATH/lib/**/*.rb will be scanned, and $TAP_PATH
itself will be registered as a path in env. If $TAP_PATH/tap.yml exists, it
will be loaded as a map of paths.

As a shorthand, just know that any constants under the lib directory of TAP_PATH will be discovered.

  [dir/lib/goodnight.rb]
  require 'tap/task'
  
  # ::task
  class Goodnight < Tap::Task
    def process(input)
      puts "goodnight #{input}"
    end
  end
  
  % tap goodnight moon
  unresolvable constant: "goodnight" (RuntimeError)
  % TAP_PATH=dir tap goodnight moon
  goodnight moon
  
=== TAPENV (default 'tapenv')

Specifies signal files to be loaded in the env context. These files can be
used to manually adjust an environment by setting/unsetting constants and
resource paths.

  [tapenv]
  unset Tap::Tasks::Dump
  
  % tap load a -: dump
  unresolvable constant: "dump" (RuntimeError)

=== TAPRC (default '~/.taprc:taprc')

Specifies signal files to be loaded in the app context. These files can be
used to manually build workflows, or configure the app.

  [taprc]
  set loader load
  set dumper dump

  % tap - join loader dumper -/enq loader 'goodnight moon'
  goodnight moon

