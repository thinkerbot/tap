= Application Programming Interface

(Note these are all currently provisional.)

== Tap::App

Applications require the following API for nodes, joins, and middleware. Tap
provides modules or base classes that implement these APIs and may be used as
the foundation for subclasses.

==== Node

  call(*inputs)    any return is allowed
  joins()          returns an array of joins, or nil

The signature for call can be modified as necessary.  Joins is optional, but must adhere to the API if provided.

==== Join

  call(result)     any return is allowed

==== Middleware

  Middleware.new(stack)   returns an instance of middleware
  call(node, inputs=[])   any return is allowed
  stack()                 returns the original stack

The middleware API is essentially the same as for {Rack}[http://rack.rubyforge.org/].

== Tap::Schema

Schema describe workflows as data. To build a workflow from a schema, workflow
resources like nodes, joins, and middleware need to instantiate themselves
using the schema data. The <tt>parse!</tt> and <tt>instantiate</tt> methods
must be provided to do so.

  Resource.parse!(argv=ARGV, app=App.instance)
  Resource.instantiate(argh, app=App.instance)

As implied in by the inputs, <tt>parse!</tt> instantiates from an array, while
<tt>instantiate</tt> instantiates from a hash with symbol keys. If
<tt>parse!</tt> receives a string, it must be able to convert it to an array
(ex using Shellwords).

How the class actually performs the instantiation is up to the class but
typically parse creates a hash and calls instantiate.

== Tap::Env

Envs identify resources by resource identifiers (ie constant attributes
recognized by Lazydoc). This identifies 'Sample' as an 'example' resource.

  [file.rb]

  # Sample::example summary
  # description
  class Sample
  end

The constant name will be inferred from the path for the file containing the
resource identifier if no constant name is specified.

  [sample.rb]
  
  # ::example summary
  # description
  class Sample
  end

Resources may be accessed using Tap::Env#manifest. Resources intended to be
discovered by Env must map the identifier documentation to the class 'desc'
method. The easiest way to do so is with a
{lazy_attr}[link:lazydoc/classes/Lazydoc/Attributes.html].

  # ::example summary
  # description
  class Sample
    lazy_attr :desc, 'example'
  end
  
  Sample::desc.summary         # => "summary"
  Sample::desc.to_s            # => "description"
  
