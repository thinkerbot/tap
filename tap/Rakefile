require 'rake'
require 'rake/testtask'
require 'rake/rdoctask'
require 'rake/gempackagetask'

$:.unshift File.expand_path("#{File.dirname(__FILE__)}/lib")
require 'tap/version'

#
# Gem specification
#

def gemspec
  require 'rubygems/specification'
  
  data = File.read('tap.gemspec')
  spec = nil
  Thread.new { spec = eval("$SAFE = 3\n#{data}") }.join
  spec
end

Rake::GemPackageTask.new(gemspec) do |pkg|
  pkg.need_tar = true
end

desc 'Prints the gemspec manifest.'
task :print_manifest do
  # collect files from the gemspec, labeling 
  # with true or false corresponding to the
  # file existing or not
  files = gemspec.files.inject({}) do |files, file|
    files[File.expand_path(file)] = [File.exists?(file), file]
    files
  end
  
  # gather non-rdoc/pkg files for the project
  # and add to the files list if they are not
  # included already (marking by the absence
  # of a label)
  Dir.glob("**/*").each do |file|
    next if file =~ /^(rdoc|pkg|test|specs|images|.*\.rbc$)/ || File.directory?(file)
    
    path = File.expand_path(file)
    files[path] = ["", file] unless files.has_key?(path)
  end
  
  # sort and output the results
  files.values.sort_by {|exists, file| file }.each do |entry| 
    puts "%-5s %s" % entry
  end
end

#
# Documentation tasks
#

desc 'Generate documentation.'
Rake::RDocTask.new(:rdoc) do |rdoc|
  spec = gemspec
  
  rdoc.rdoc_dir = 'rdoc'
  rdoc.options.concat(spec.rdoc_options)
  rdoc.rdoc_files.include( spec.extra_rdoc_files )
  
  files = spec.files.select {|file| file =~ /^lib.*\.rb$/}
  rdoc.rdoc_files.include( files )
  
  begin
    require 'cdoc'
    rdoc.template = 'cdoc/cdoc_html_template' 
    rdoc.options << '--fmt' << 'cdoc'
  rescue(LoadError)
  end
end

desc "Publish RDoc to RubyForge"
task :publish_rdoc => [:rdoc] do
  require 'yaml'
  
  config = YAML.load(File.read(File.expand_path("~/.rubyforge/user-config.yml")))
  host = "#{config["username"]}@rubyforge.org"
  
  rsync_args = "-v -c -r"
  remote_dir = "/var/www/gforge-projects/tap/rdoc"
  local_dir = "rdoc"
 
  sh %{rsync #{rsync_args} #{local_dir}/ #{host}:#{remote_dir}}
end

#
# Test tasks
#

# Note: the test tasks have been broken up into sections representing
# fairly autonomous parts, given of course that the prior requirements
# all work.  The natural order is:
#
# * root
# * signals
# * env
# * app
# * task
# * parser
# * tap (runs all previous)
# * doc (runs tests in test/doc)s
# * cmd (runs tests in test/cmd)
# * benchmark (runs test in test/benchmark)
#
# Run 'rake test' to run all tests except the benchmarks.  It should
# be noted that the tests have depend on lazydoc and configurable,
# so those load paths are added.  Additionally, tests after root may
# depend on the files in tap-test.  This seems odd because of course
# tap-test depends on tap, but the parts of tap-test that get used
# only rely on root.
#

desc 'run tests'
task :default => :test

def test(tests)
  libs = ['lib']
  unless ENV['gems']
    libs << '../lazydoc/lib'
    libs << '../configurable/lib'
    libs << '../tap-test/lib'
  end
  
  libs.collect! {|lib| ['-I', lib] }
  cmd = ['ruby', "-w"] + libs.flatten + ["-e", "ARGV.each {|test| load test}"] + tests
  sh(*cmd)
end

def test_section(type)
  test Dir["test/tap/#{type}*_test.rb", "test/tap/#{type}/**/*_test.rb"].uniq
end

desc 'run test:tap, test:doc'
task :test => %w{
  test:tap
  test:doc
}

namespace :test do
  desc 'run root tests'
  task(:root) { test_section :root }
  
  desc 'run app tests'
  task(:app) { test_section :app }
  
  desc 'run signals tests'
  task(:signals) { test_section :signals }
  
  desc 'run env tests'
  task(:env) { test_section :env }
  
  desc 'run task tests'
  task :task do
    test %w{
      test/tap/join_test.rb
    } + Dir[
      'test/tap/task*_test.rb',
      'test/tap/joins/*_test.rb', 
      'test/tap/tasks/*_test.rb'
    ].uniq
  end

  desc 'run parser tests'
  task(:parser) { test_section :parser }

  desc 'run all tap tests'
  task(:tap) { test(Dir['test/tap/**/*_test.rb'] + Dir["test/*_test.rb"]) }
  
  desc 'run documentation tests'
  task(:doc) { test Dir["test/doc/**/*_test.rb"] }
  
  desc 'run benchmark tests'
  task(:benchmark) { test Dir["test/benchmark/**/*_benchmark.rb"] }
end