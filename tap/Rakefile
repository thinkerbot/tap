require 'rake'
require 'rake/testtask'
require 'rake/rdoctask'
require 'rake/gempackagetask'

$:.unshift File.expand_path("#{File.dirname(__FILE__)}/lib")
require 'tap/constants'

#
# Gem specification
#

def gemspec
  require 'rubygems/specification'
  
  data = File.read('tap.gemspec')
  spec = nil
  Thread.new { spec = eval("$SAFE = 3\n#{data}") }.join
  spec
end

Rake::GemPackageTask.new(gemspec) do |pkg|
  pkg.need_tar = true
end

desc 'Prints the gemspec manifest.'
task :print_manifest do
  # collect files from the gemspec, labeling 
  # with true or false corresponding to the
  # file existing or not
  files = gemspec.files.inject({}) do |files, file|
    files[File.expand_path(file)] = [File.exists?(file), file]
    files
  end
  
  # gather non-rdoc/pkg files for the project
  # and add to the files list if they are not
  # included already (marking by the absence
  # of a label)
  Dir.glob("**/*").each do |file|
    next if file =~ /^(rdoc|pkg|test|specs|images)/ || File.directory?(file)
    
    path = File.expand_path(file)
    files[path] = ["", file] unless files.has_key?(path)
  end
  
  # sort and output the results
  files.values.sort_by {|exists, file| file }.each do |entry| 
    puts "%-5s %s" % entry
  end
end

#
# Documentation tasks
#

desc 'Generate documentation.'
Rake::RDocTask.new(:rdoc) do |rdoc|
  spec = gemspec
  
  rdoc.rdoc_dir = 'rdoc'
  rdoc.options.concat(spec.rdoc_options)
  rdoc.rdoc_files.include( spec.extra_rdoc_files )
  
  files = spec.files.select {|file| file =~ /^lib.*\.rb$/}
  rdoc.rdoc_files.include( files )
  
  require 'cdoc'
  rdoc.template = 'cdoc/cdoc_html_template' 
  rdoc.options << '--fmt' << 'cdoc'
end

desc "Publish RDoc to RubyForge"
task :publish_rdoc => [:rdoc] do
  require 'yaml'
  
  config = YAML.load(File.read(File.expand_path("~/.rubyforge/user-config.yml")))
  host = "#{config["username"]}@rubyforge.org"
  
  rsync_args = "-v -c -r"
  remote_dir = "/var/www/gforge-projects/tap/rdoc"
  local_dir = "rdoc"
 
  sh %{rsync #{rsync_args} #{local_dir}/ #{host}:#{remote_dir}}
end

#
# Test tasks
#

desc 'Default: Run tests.'
task :default => :test

def test(tests)
  libs = ['lib']
  unless ENV['gems']
    libs << '../lazydoc/lib'
    libs << '../configurable/lib'
  end
  
  libs.collect! {|lib| ['-I', lib] }
  cmd = ['ruby', "-w"] + libs.flatten + ["-e", "ARGV.each {|test| load test}"] + tests
  sh(*cmd)
end

def test_section(type)
  test Dir["test/tap/#{type}_test.rb", "test/tap/#{type}/**/*_test.rb"].uniq
end

desc 'Run tests.'
task :test => %w{
  test:tap
  
}

namespace :test do
  desc 'run support tests'
  task(:support) { test_section :support }

  desc 'run root tests'
  task(:root) { test_section :root }
  
  desc 'run app tests'
  task(:app) { test_section :app }
  
  desc 'run task tests'
  task :task do
    test %w{
      test/tap/load_test.rb
      test/tap/dump_test.rb
      test/tap/join_test.rb
    } + Dir[
      'test/tap/task*_test.rb',
      'test/tap/joins/*_test.rb', 
      'test/tap/tasks/*_test.rb'
    ].uniq
  end
  
  desc 'run schema tests'
  task :schema do
    test_section :schema
  end
  
  desc 'run env tests'
  task(:env) { test_section :env }
  
  desc 'run generator tests'
  task(:generator) { test Dir['test/tap/generator/**/*_test.rb'] }

  desc 'run all tap tests'
  task(:tap) { test(Dir.glob('test/tap/**/*_test.rb')) }
  
  #
  # test submodules
  #
  
  desc 'run benchmark tests'
  task(:benchmark) { test Dir["test/benchmark/**/*_benchmark.rb"] }
  
  desc 'run documentation tests'
  task(:doc) { test Dir["test/doc/**/readme_doc.rb"] }
  
  desc "Run specs."
  task(:spec) do
    libs = ['lib']
    unless ENV['gems']
      libs << '../lazydoc/lib'
      libs << '../configurable/lib'
    end
  
    libs.collect! {|lib| ['-I', lib] }
    specs = Dir.glob('specs/**/*_spec.rb')
  
    cmd = ['ruby', "-w"] + libs.flatten + ["-e", "ARGV.each {|spec| load spec}"] + specs
    sh(*cmd)
  end

  desc 'Run functional tests.'
  task(:functional) do
    libs = ['lib']
    unless ENV['gems']
      libs << '../lazydoc/lib'
      libs << '../configurable/lib'
    end
    libs.collect! {|lib| ['-I', lib] }
    
    failures = []
    Dir.glob('test/functional/*_test.rb').each do |path|
      begin
        cmd = ['ruby', "-w"] + libs.flatten + [path]
        sh(*cmd)
      rescue(Exception)
        failures << path
      end
    end
    
    unless failures.empty?
      puts "\nFailures (#{failures.length}):\n#{failures.join("\n")}"
    end
  end
end