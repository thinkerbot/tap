require 'rake'

#
# Dependency tasks
#

desc 'Checkout submodules'
task :submodules do
  Dir.chdir('..') do
    output = `git submodule status 2>&1`
  
    if output =~ /^-/m
      puts "Missing submodules:\n#{output}"
      sh "git submodule init"
      sh "git submodule update"
      puts
    end
  end
end

#
# Test tasks
#

def test(tests)
  libs = ['lib']
  unless ENV['gems']
    libs << '../configurable/lib'
    libs << '../lazydoc/lib'
    libs << '../tap/lib'
    libs << '../tap-test/lib'
  end
  
  cmd = ['ruby', '-w', '-e', 'ARGV.each {|test| load test}']
  libs.each {|lib| cmd.concat ['-I', lib] }
  cmd.concat(tests)
  sh(*cmd)
end

def test_section(type)
  test Dir["test/tap/#{type}*_test.rb", "test/tap/#{type}/**/*_test.rb"].uniq
end

desc 'Run the tests'
task :default => :test

desc 'Run the tests'
task :test => %w{
  test:tap
  test:doc
}

namespace :test do
  desc 'run root tests'
  task(:root) { test_section :root }
  
  desc 'run app tests'
  task(:app) { test_section :app }
  
  desc 'run signals tests'
  task(:signals) { test_section :signals }
  
  desc 'run env tests'
  task(:env) { test_section :env }
  
  desc 'run parser tests'
  task(:parser) { test_section :parser }
  
  desc 'run all tap tests'
  task(:tap => :submodules) { test(Dir['test/tap/**/*_test.rb'] + Dir['test/*_test.rb']) }
  
  desc 'run documentation tests'
  task(:doc => :submodules) { test Dir['test/doc/**/*_test.rb'] }
  
  desc 'run benchmark tests'
  task(:benchmark => :submodules) { test Dir['test/benchmark/**/*_benchmark.rb'] }
end