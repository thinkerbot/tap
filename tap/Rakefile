require 'rake'
require 'rake/rdoctask'
require 'rake/gempackagetask'

#
# Gem specification
#

def gemspec
  require 'rubygems/specification'
  eval File.read('tap.gemspec')
end

Rake::GemPackageTask.new(gemspec) do |pkg|
  pkg.need_tar = true
end

desc 'Prints the gemspec manifest.'
task :print_manifest do
  # collect files from the gemspec, labeling 
  # with true or false corresponding to the
  # file existing or not
  files = gemspec.files.inject({}) do |files, file|
    files[File.expand_path(file)] = [File.exists?(file), file]
    files
  end
  
  # gather non-rdoc/pkg files for the project
  # and add to the files list if they are not
  # included already (marking by the absence
  # of a label)
  Dir.glob('**/*').each do |file|
    next if file =~ /^(rdoc|pkg|test|specs|images|.*\.rbc$)/ || File.directory?(file)
    
    path = File.expand_path(file)
    files[path] = ['', file] unless files.has_key?(path)
  end
  
  # sort and output the results
  files.values.sort_by {|exists, file| file }.each do |entry| 
    puts '%-5s %s' % entry
  end
end

#
# Documentation tasks
#

desc 'Generate documentation.'
Rake::RDocTask.new(:rdoc) do |rdoc|
  spec = gemspec
  
  rdoc.rdoc_dir = 'rdoc'
  rdoc.options.concat(spec.rdoc_options)
  rdoc.rdoc_files.include( spec.extra_rdoc_files )
  
  files = spec.files.select {|file| file =~ /^lib.*\.rb$/}
  rdoc.rdoc_files.include( files )
  
  begin
    require 'cdoc'
    rdoc.template = 'cdoc/cdoc_html_template' 
    rdoc.options << '--fmt' << 'cdoc'
  rescue(LoadError)
  end
end

desc 'Publish RDoc to RubyForge'
task :publish_rdoc => [:rdoc] do
  require 'yaml'
  
  config = YAML.load(File.read(File.expand_path('~/.rubyforge/user-config.yml')))
  host = "#{config['username']}@rubyforge.org"
  
  rsync_args = '-v -c -r'
  remote_dir = '/var/www/gforge-projects/tap/rdoc'
  local_dir = 'rdoc'
 
  sh %{rsync #{rsync_args} #{local_dir}/ #{host}:#{remote_dir}}
end

#
# Dependency tasks
#

desc 'Checkout submodules'
task :submodules do
  Dir.chdir('..') do
    output = `git submodule status 2>&1`
  
    if output =~ /^-/m
      puts "Missing submodules:\n#{output}"
      sh "git submodule init"
      sh "git submodule update"
      puts
    end
  end
end
#
# Test tasks
#

def test(tests)
  libs = ['lib']
  unless ENV['gems']
    libs << '../configurable/lib'
    libs << '../lazydoc/lib'
    libs << '../tap/lib'
    libs << '../tap-test/lib'
  end
  
  cmd = ['ruby', '-w', '-e', 'ARGV.each {|test| load test}']
  libs.each {|lib| cmd.concat ['-I', lib] }
  cmd.concat(tests)
  sh(*cmd)
end

def test_section(type)
  test Dir["test/tap/#{type}*_test.rb", "test/tap/#{type}/**/*_test.rb"].uniq
end

desc 'Run the tests'
task :default => :test

desc 'Run the tests'
task :test => %w{
  test:tap
  test:doc
}

namespace :test do
  desc 'run root tests'
  task(:root) { test_section :root }
  
  desc 'run app tests'
  task(:app) { test_section :app }
  
  desc 'run signals tests'
  task(:signals) { test_section :signals }
  
  desc 'run env tests'
  task(:env) { test_section :env }
  
  desc 'run parser tests'
  task(:parser) { test_section :parser }
  
  desc 'run all tap tests'
  task(:tap => :submodules) { test(Dir['test/tap/**/*_test.rb'] + Dir['test/*_test.rb']) }
  
  desc 'run documentation tests'
  task(:doc => :submodules) { test Dir['test/doc/**/*_test.rb'] }
  
  desc 'run benchmark tests'
  task(:benchmark => :submodules) { test Dir['test/benchmark/**/*_benchmark.rb'] }
end