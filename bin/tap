#!/usr/local/bin/ruby
# usage: tap <command> {options} [args]
#
# examples:
#   tap generate root .                  # generates a root dir
#   tap run taskname --option input      # runs the 'taskname' task
#
# help:
#   tap help                             # prints this help
#   tap command --help                   # prints help for 'command'
#

require File.join( File.dirname(__FILE__), "../lib/tap.rb")

# setup the environment
app = Tap::App.instance
env = Tap::Env.new({}, app ,app.logger)
env.debug_setup if ARGV.delete('-d-')

before = nil
after = nil

# configure the app to tap.yml if it exists
default_config_file = Tap::Env::DEFAULT_CONFIG_FILE
begin
  
  env.reconfigure(Tap::Env.read_config(default_config_file)) do |unhandled_configs|
    before = unhandled_configs.delete('before')
    after = unhandled_configs.delete('after')
  end if File.exists?(default_config_file)

  #env.discover_gems unless 
  
  env.command_paths << File.join( File.dirname(__FILE__), "../lib/tap/cmd")
  
rescue(Exception)
  # catch errors and exit gracefully
  # (errors usu from gem loading errors)
  puts "Configuration error: #{$!.message}"
  puts $!.backtrace if $DEBUG
  puts "Check #{default_config_file} configurations"
  exit(1)
end

# alert the user to the root directory if it's not Dir.pwd
unless app.options.quiet || app.root == File.expand_path(Dir.pwd)
  puts "root: #{app.root}" 
end

#
# setup after script
#

at_exit do
  begin
    eval(after.to_s) 
  rescue
    puts "Error in after script."
    env.handle_error($!)
    exit(1)
  end
end

#
# run before script
#

begin
  eval(before.to_s)
rescue
  puts "Error in before script."
  env.handle_error($!)
  exit(1)
end

#
# run tap
#

begin
  env.activate
  
  available_commands = env.commands
  command = ARGV.shift

  case command  
  when "--help", "-h", "help", "?", nil 
    # give some help
    File.open(__FILE__) do |file|
      bang_line = true
      file.each_line do |line|
        if bang_line
          bang_line = false
          next
        end
        
        break if line !~ /^#\s?(.*)/
        puts $1
      end
    end
    
    puts "available commands:"

    commands = available_commands.keys
    commands.unshift("help")
    
    print "  "
    puts commands.sort.join("\n  ")
    puts
    puts "version #{Tap::VERSION} -- #{Tap::WEBSITE}"
  when Tap::Support::CommandLine::SPLIT_ARGV_REGEXP
    ARGV.unshift command
    ARGV.unshift '--'
    ARGV.unshift '--dump'
    load available_commands['run']
  else
    if available_commands.has_key?(command)
      # run the command, if it exists
      load available_commands[command]
    else
      puts "Unknown command: '#{command}'"
      puts "Type 'tap help' for usage information."
    end
  end
rescue
  env.handle_error($!)
end

exit(0)