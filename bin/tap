#!/usr/local/bin/ruby
# usage: tap <command> {options} [args]
#
# examples:
#   tap generate root .                  # generates a root dir
#   tap run taskname --option input      # runs the 'taskname' task
#
# help:
#   tap help                             # prints this help
#   tap command --help                   # prints help for 'command'
#

tap_root_dir  = File.dirname(__FILE__) + "/.."
require "#{tap_root_dir}/lib/tap.rb"

# setup the environment
begin
  
  $DEBUG = true if ARGV.delete('-d-')
  before = nil
  after = nil

  app = Tap::App.instance
  env = Tap::Env.instantiate(app, Tap::Env.read_config(Tap::Env::GLOBAL_CONFIG_FILE), app.logger) do |unhandled_configs|
    before = unhandled_configs.delete(:before)
    after = unhandled_configs.delete(:after)
  
    unless unhandled_configs.empty?
      local.log(:warn, "ignoring non-env configs: #{unhandled_configs.keys.join(',')}", Logger::DEBUG)
    end
  end
  
  # add all gems if no gems are specified? ... VERY SLOW ~ 1/3 the overhead for tap
  if !File.exists?(Tap::Env::DEFAULT_CONFIG_FILE)
    env.gems = Tap::Env.known_gems(true)
  end
  
  tap = Tap::Env.instance_for(tap_root_dir)
  tap.unshift(env)

rescue(Tap::Env::ConfigError)
  # catch errors and exit gracefully
  # (errors usu from gem loading errors)
  puts $!.message
  exit(1)
end

#
# setup after script
#

at_exit do
  begin
    eval(after) if after != nil
  rescue(Exception)
    puts "Error in after script."
    tap.handle_error($!)
    exit(1)
  end
end

#
# run before script
#

begin
  eval(before) if before != nil
rescue(Exception)
  puts "Error in before script."
  tap.handle_error($!)
  exit(1)
end 

#
# run tap
#

begin
  tap.activate

  command = ARGV.shift

  case command  
  when nil, '--help'
    # give some help
    puts Tap::Support::TDoc.usage(__FILE__)
    puts
    puts "available commands:"
    
    commands = tap.lookup_paths_for(:commands)
    tap.lookup_paths.each_pair do |env_lookup, env|
      next unless commands.has_key?(env)
      puts "=== #{env_lookup} (#{env.root.root})" if commands.length > 1
      commands[env].each do |(path_lookup, path)|
        puts "  #{path_lookup.chomp('.rb')}"
      end
    end
    
    puts
    puts "version #{Tap::VERSION} -- #{Tap::WEBSITE}"
  when Tap::Support::CommandLine::SPLIT_ARGV_REGEXP
    if ARGV.empty?
      ARGV.unshift '-T'     
    else
      ARGV.unshift command
      ARGV.unshift '--'
    end
    
    env.short_run_options.reverse_each do |opt|
      ARGV.unshift(opt)
    end
    
    load tap.lookup(:commands, 'run.rb')  
  else
    if path = tap.lookup(:commands, File.extname(command) == "" ? "#{command}.rb" : command)
      load path # run the command, if it exists
    else
      puts "Unknown command: '#{command}'"
      puts "Type 'tap help' for usage information."
    end
  end
rescue
  tap.handle_error($!)
end

exit(0)