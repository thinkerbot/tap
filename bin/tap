#!/usr/local/bin/ruby
# usage: tap <command> {options} [args]
#
# examples:
#   tap generate root .                  # generates a root dir
#   tap run taskname --option input      # runs the 'taskname' task
#
# help:
#   tap help                             # prints this help
#   tap command --help                   # prints help for 'command'
#

require File.join( File.dirname(__FILE__), "../lib/tap.rb")

# setup the environment
app = Tap::App.instance
env = Tap::Env.new({}, app, app.logger)
env.debug_setup if ARGV.delete('-d-')

before = nil
after = nil

# configure the app to tap.yml if it exists
default_config_file = Tap::Env::DEFAULT_CONFIG_FILE
begin
  
  if File.exists?(default_config_file)
    env.reconfigure(Tap::Env.read_config(default_config_file)) do |unhandled_configs|
      before = unhandled_configs.delete(:before)
      after = unhandled_configs.delete(:after)
    
      unless unhandled_configs.empty?
        env.log(:warn, "ignoring non-env configs: #{unhandled_configs.keys.join(',')}", Logger::DEBUG)
      end
    
    end
  else
    env.gems = Tap::Env.known_gems(true)
  end
  
  # ensure the default command path is in command paths
  # or better... add env to a default env with these set...
  env.command_paths << File.join( File.dirname(__FILE__), "../lib/tap/cmd")

rescue(Exception)
  # catch errors and exit gracefully
  # (errors usu from gem loading errors)
  puts "Configuration error: #{$!.message}"
  puts $!.backtrace if $DEBUG
  puts "Check #{default_config_file} configurations"
  exit(1)
end

#
# setup after script
#

at_exit do
  begin
    eval(after) if after != nil
  rescue(Exception)
    puts "Error in after script."
    env.handle_error($!)
    exit(1)
  end
end

#
# run before script
#

begin
  eval(before) if before != nil
rescue(Exception)
  puts "Error in before script."
  env.handle_error($!)
  exit(1)
end 

#
# run tap
#

begin
  env.activate

  command = ARGV.shift

  case command  
  when "--help", "-h", "help", "?", nil 
    # give some help
    puts Tap::Support::CDoc.usage(File.read(__FILE__))
    puts "available commands:"
    
    commands = env.lookup_paths_for(:commands)
    env.lookup_paths.each_pair do |env_lookup, environment|
      next unless commands.has_key?(environment)
      puts "=== #{env_lookup} (#{environment.root.root})" if commands.length > 1
      commands[environment].each do |(path_lookup, path)|
        puts "  #{path_lookup.chomp('.rb')}"
      end
    end
    
    puts
    puts "version #{Tap::VERSION} -- #{Tap::WEBSITE}"
  when Tap::Support::CommandLine::SPLIT_ARGV_REGEXP
    ARGV.unshift command
    ARGV.unshift '--'
    ARGV.unshift '--dump'
    load available_commands['run']
  else
    if path = env.lookup(:commands, File.extname(command) == "" ? "#{command}.rb" : command)
      load path # run the command, if it exists
    else
      puts "Unknown command: '#{command}'"
      puts "Type 'tap help' for usage information."
    end
  end
rescue
  env.handle_error($!)
end

exit(0)